// Mocks generated by Mockito 5.4.6 from annotations
// in yata/test/unit/features/auth/services/auth_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:supabase_flutter/supabase_flutter.dart' as _i3;
import 'package:yata/core/auth/auth_service.dart' as _i4;
import 'package:yata/core/base/base_error_msg.dart' as _i7;
import 'package:yata/core/constants/query_types.dart' as _i9;
import 'package:yata/features/auth/models/user_model.dart' as _i2;
import 'package:yata/features/auth/repositories/user_repository.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSession_2 extends _i1.SmartFake implements _i3.Session {
  _FakeSession_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SupabaseClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClientService extends _i1.Mock
    implements _i4.SupabaseClientService {
  MockSupabaseClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSignedIn =>
      (super.noSuchMethod(Invocation.getter(#isSignedIn), returnValue: false)
          as bool);

  @override
  _i5.Stream<_i3.AuthState> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i5.Stream<_i3.AuthState>.empty(),
          )
          as _i5.Stream<_i3.AuthState>);

  @override
  String get loggerComponent =>
      (super.noSuchMethod(
            Invocation.getter(#loggerComponent),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#loggerComponent),
            ),
          )
          as String);

  @override
  _i5.Future<bool> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i3.User?> handleAuthCallback(String? callbackUrl) =>
      (super.noSuchMethod(
            Invocation.method(#handleAuthCallback, [callbackUrl]),
            returnValue: _i5.Future<_i3.User?>.value(),
          )
          as _i5.Future<_i3.User?>);

  @override
  _i5.Future<void> refreshSessionIfNeeded() =>
      (super.noSuchMethod(
            Invocation.method(#refreshSessionIfNeeded, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void logDebug(String? message) => super.noSuchMethod(
    Invocation.method(#logDebug, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void logInfo(String? message) => super.noSuchMethod(
    Invocation.method(#logInfo, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void logWarning(String? message) => super.noSuchMethod(
    Invocation.method(#logWarning, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void logError(String? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#logError, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void logInfoMessage(
    _i7.LogMessage? logMessage, [
    Map<String, String>? params,
  ]) => super.noSuchMethod(
    Invocation.method(#logInfoMessage, [logMessage, params]),
    returnValueForMissingStub: null,
  );

  @override
  void logWarningMessage(
    _i7.LogMessage? logMessage, [
    Map<String, String>? params,
  ]) => super.noSuchMethod(
    Invocation.method(#logWarningMessage, [logMessage, params]),
    returnValueForMissingStub: null,
  );

  @override
  void logErrorMessage(
    _i7.LogMessage? logMessage, [
    Map<String, String>? params,
    Object? error,
    StackTrace? stackTrace,
  ]) => super.noSuchMethod(
    Invocation.method(#logErrorMessage, [
      logMessage,
      params,
      error,
      stackTrace,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void addSubscription(_i5.StreamSubscription<dynamic>? subscription) =>
      super.noSuchMethod(
        Invocation.method(#addSubscription, [subscription]),
        returnValueForMissingStub: null,
      );

  @override
  void disposeStreams() => super.noSuchMethod(
    Invocation.method(#disposeStreams, []),
    returnValueForMissingStub: null,
  );

  @override
  void cancelSubscription(_i5.StreamSubscription<dynamic>? subscription) =>
      super.noSuchMethod(
        Invocation.method(#cancelSubscription, [subscription]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i8.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  List<String> get primaryKeyColumns =>
      (super.noSuchMethod(
            Invocation.getter(#primaryKeyColumns),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  String get loggerComponent =>
      (super.noSuchMethod(
            Invocation.getter(#loggerComponent),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#loggerComponent),
            ),
          )
          as String);

  @override
  _i2.UserModel fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
            Invocation.method(#fromJson, [json]),
            returnValue: _FakeUserModel_0(
              this,
              Invocation.method(#fromJson, [json]),
            ),
          )
          as _i2.UserModel);

  @override
  _i5.Future<_i2.UserModel?> findByEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#findByEmail, [email]),
            returnValue: _i5.Future<_i2.UserModel?>.value(),
          )
          as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<List<_i2.UserModel>> findByRole(_i2.UserRole? role) =>
      (super.noSuchMethod(
            Invocation.method(#findByRole, [role]),
            returnValue: _i5.Future<List<_i2.UserModel>>.value(
              <_i2.UserModel>[],
            ),
          )
          as _i5.Future<List<_i2.UserModel>>);

  @override
  _i5.Future<List<_i2.UserModel>> getActiveUsers({
    int? daysBack = 30,
    int? limit = 100,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getActiveUsers, [], {
              #daysBack: daysBack,
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i5.Future<List<_i2.UserModel>>.value(
              <_i2.UserModel>[],
            ),
          )
          as _i5.Future<List<_i2.UserModel>>);

  @override
  _i5.Future<List<_i2.UserModel>> getVerifiedUsers({
    int? limit = 100,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getVerifiedUsers, [], {
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i5.Future<List<_i2.UserModel>>.value(
              <_i2.UserModel>[],
            ),
          )
          as _i5.Future<List<_i2.UserModel>>);

  @override
  _i5.Future<void> updateLastSignIn(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#updateLastSignIn, [userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.UserModel> updateProfile(
    String? userId, {
    String? displayName,
    String? avatarUrl,
    String? phoneNumber,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateProfile,
              [userId],
              {
                #displayName: displayName,
                #avatarUrl: avatarUrl,
                #phoneNumber: phoneNumber,
                #metadata: metadata,
              },
            ),
            returnValue: _i5.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(
                  #updateProfile,
                  [userId],
                  {
                    #displayName: displayName,
                    #avatarUrl: avatarUrl,
                    #phoneNumber: phoneNumber,
                    #metadata: metadata,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i2.UserModel>);

  @override
  _i5.Future<bool> isAdmin(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#isAdmin, [userId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> isStaff(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#isStaff, [userId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i2.UserModel?> findOne({List<_i9.QueryFilter>? filters}) =>
      (super.noSuchMethod(
            Invocation.method(#findOne, [], {#filters: filters}),
            returnValue: _i5.Future<_i2.UserModel?>.value(),
          )
          as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<_i2.UserModel?> create(_i2.UserModel? entity) =>
      (super.noSuchMethod(
            Invocation.method(#create, [entity]),
            returnValue: _i5.Future<_i2.UserModel?>.value(),
          )
          as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<List<_i2.UserModel>> bulkCreate(List<_i2.UserModel>? entities) =>
      (super.noSuchMethod(
            Invocation.method(#bulkCreate, [entities]),
            returnValue: _i5.Future<List<_i2.UserModel>>.value(
              <_i2.UserModel>[],
            ),
          )
          as _i5.Future<List<_i2.UserModel>>);

  @override
  _i5.Future<_i2.UserModel?> getById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i5.Future<_i2.UserModel?>.value(),
          )
          as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<_i2.UserModel?> getByPrimaryKey(Map<String, dynamic>? keyMap) =>
      (super.noSuchMethod(
            Invocation.method(#getByPrimaryKey, [keyMap]),
            returnValue: _i5.Future<_i2.UserModel?>.value(),
          )
          as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<_i2.UserModel?> updateById(
    String? id,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateById, [id, updates]),
            returnValue: _i5.Future<_i2.UserModel?>.value(),
          )
          as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<_i2.UserModel?> updateByPrimaryKey(
    Map<String, dynamic>? keyMap,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateByPrimaryKey, [keyMap, updates]),
            returnValue: _i5.Future<_i2.UserModel?>.value(),
          )
          as _i5.Future<_i2.UserModel?>);

  @override
  _i5.Future<void> deleteById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteById, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteByPrimaryKey(Map<String, dynamic>? keyMap) =>
      (super.noSuchMethod(
            Invocation.method(#deleteByPrimaryKey, [keyMap]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> bulkDelete(List<String>? keys) =>
      (super.noSuchMethod(
            Invocation.method(#bulkDelete, [keys]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> existsById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#existsById, [id]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> existsByPrimaryKey(Map<String, dynamic>? keyMap) =>
      (super.noSuchMethod(
            Invocation.method(#existsByPrimaryKey, [keyMap]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<List<_i2.UserModel>> list({int? limit = 100, int? offset = 0}) =>
      (super.noSuchMethod(
            Invocation.method(#list, [], {#limit: limit, #offset: offset}),
            returnValue: _i5.Future<List<_i2.UserModel>>.value(
              <_i2.UserModel>[],
            ),
          )
          as _i5.Future<List<_i2.UserModel>>);

  @override
  _i5.Future<List<_i2.UserModel>> find({
    List<_i9.QueryFilter>? filters,
    List<_i9.OrderByCondition>? orderBy,
    int? limit = 100,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#find, [], {
              #filters: filters,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i5.Future<List<_i2.UserModel>>.value(
              <_i2.UserModel>[],
            ),
          )
          as _i5.Future<List<_i2.UserModel>>);

  @override
  _i5.Future<int> count({List<_i9.QueryFilter>? filters}) =>
      (super.noSuchMethod(
            Invocation.method(#count, [], {#filters: filters}),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  void logDebug(String? message) => super.noSuchMethod(
    Invocation.method(#logDebug, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void logInfo(String? message) => super.noSuchMethod(
    Invocation.method(#logInfo, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void logWarning(String? message) => super.noSuchMethod(
    Invocation.method(#logWarning, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void logError(String? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#logError, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void logInfoMessage(
    _i7.LogMessage? logMessage, [
    Map<String, String>? params,
  ]) => super.noSuchMethod(
    Invocation.method(#logInfoMessage, [logMessage, params]),
    returnValueForMissingStub: null,
  );

  @override
  void logWarningMessage(
    _i7.LogMessage? logMessage, [
    Map<String, String>? params,
  ]) => super.noSuchMethod(
    Invocation.method(#logWarningMessage, [logMessage, params]),
    returnValueForMissingStub: null,
  );

  @override
  void logErrorMessage(
    _i7.LogMessage? logMessage, [
    Map<String, String>? params,
    Object? error,
    StackTrace? stackTrace,
  ]) => super.noSuchMethod(
    Invocation.method(#logErrorMessage, [
      logMessage,
      params,
      error,
      stackTrace,
    ]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i3.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  Map<String, dynamic> get appMetadata =>
      (super.noSuchMethod(
            Invocation.getter(#appMetadata),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  String get aud =>
      (super.noSuchMethod(
            Invocation.getter(#aud),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#aud)),
          )
          as String);

  @override
  String get createdAt =>
      (super.noSuchMethod(
            Invocation.getter(#createdAt),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#createdAt),
            ),
          )
          as String);

  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [Session].
///
/// See the documentation for Mockito's code generation for more information.
class MockSession extends _i1.Mock implements _i3.Session {
  MockSession() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get accessToken =>
      (super.noSuchMethod(
            Invocation.getter(#accessToken),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#accessToken),
            ),
          )
          as String);

  @override
  String get tokenType =>
      (super.noSuchMethod(
            Invocation.getter(#tokenType),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#tokenType),
            ),
          )
          as String);

  @override
  _i3.User get user =>
      (super.noSuchMethod(
            Invocation.getter(#user),
            returnValue: _FakeUser_1(this, Invocation.getter(#user)),
          )
          as _i3.User);

  @override
  bool get isExpired =>
      (super.noSuchMethod(Invocation.getter(#isExpired), returnValue: false)
          as bool);

  @override
  set expiresAt(int? _expiresAt) => super.noSuchMethod(
    Invocation.setter(#expiresAt, _expiresAt),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Session copyWith({
    String? accessToken,
    int? expiresIn,
    String? refreshToken,
    String? tokenType,
    String? providerToken,
    String? providerRefreshToken,
    _i3.User? user,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #accessToken: accessToken,
              #expiresIn: expiresIn,
              #refreshToken: refreshToken,
              #tokenType: tokenType,
              #providerToken: providerToken,
              #providerRefreshToken: providerRefreshToken,
              #user: user,
            }),
            returnValue: _FakeSession_2(
              this,
              Invocation.method(#copyWith, [], {
                #accessToken: accessToken,
                #expiresIn: expiresIn,
                #refreshToken: refreshToken,
                #tokenType: tokenType,
                #providerToken: providerToken,
                #providerRefreshToken: providerRefreshToken,
                #user: user,
              }),
            ),
          )
          as _i3.Session);
}
