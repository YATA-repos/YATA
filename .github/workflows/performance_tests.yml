name: Performance Regression Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # 毎日午前2時（JST）に定期実行
    - cron: '0 17 * * *'  # UTC 17:00 = JST 02:00

jobs:
  performance-tests:
    name: パフォーマンス回帰テスト
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Flutter環境をセットアップ
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true

    - name: 依存関係をインストール
      run: |
        flutter --version
        flutter pub get

    - name: コード生成を実行
      run: |
        dart run build_runner build --delete-conflicting-outputs

    - name: 既存のパフォーマンスベースラインを復元
      uses: actions/cache@v4
      with:
        path: |
          performance_baseline.json
          performance_results.json
        key: performance-baseline-${{ github.repository }}-${{ github.ref }}
        restore-keys: |
          performance-baseline-${{ github.repository }}-
          performance-baseline-

    - name: パフォーマンステストを実行
      run: |
        echo "🚀 パフォーマンス回帰テスト開始"
        dart test/performance/run_performance_tests.dart \
          --regression-threshold=25.0 \
          --no-update-baseline
      continue-on-error: true
      id: performance_tests

    - name: パフォーマンステスト結果をアップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          performance_test_results.xml
          performance_detailed_report.json
          performance_results.json
        retention-days: 30

    - name: JUnitテスト結果を公開
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Performance Test Results
        path: performance_test_results.xml
        reporter: java-junit
        fail-on-error: false

    - name: パフォーマンス回帰アラート
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            // 詳細レポートを読み込み
            const reportData = fs.readFileSync('performance_detailed_report.json', 'utf8');
            const report = JSON.parse(reportData);
            
            // 回帰が検出された場合の処理
            if (report.regressionCount > 0) {
              const regressionDetails = report.regressions.map(r => 
                `- **${r.testName}**: ${r.reason}\n  - 実行時間: ${r.executionTimeRegressionPercent.toFixed(1)}%\n  - メモリ: ${r.memoryRegressionPercent.toFixed(1)}%`
              ).join('\n');

              const issueBody = `## 🚨 パフォーマンス回帰検出

**ブランチ**: ${process.env.GITHUB_REF}
**コミット**: ${process.env.GITHUB_SHA}
**実行時刻**: ${new Date().toISOString()}

### 📊 テスト結果サマリー
- 総テスト数: ${report.totalTests}
- 成功: ${report.passedTests}
- 失敗: ${report.failedTests}
- **回帰検出: ${report.regressionCount}**

### 🔍 検出された回帰
${regressionDetails}

### 📈 対応方法
1. 変更内容を確認し、パフォーマンスに影響する修正がないか検証してください
2. 必要に応じてコードを最適化してください
3. 意図的な変更の場合は、ベースラインを更新してください

---
*This issue was automatically created by the performance regression detection system.*`;

              // Issueを作成
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 パフォーマンス回帰検出 - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['performance', 'regression', 'automated']
              });
            }
          } catch (error) {
            console.log('パフォーマンスレポートファイルが見つかりません:', error.message);
          }

    - name: PR用パフォーマンスコメント
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const reportData = fs.readFileSync('performance_detailed_report.json', 'utf8');
            const report = JSON.parse(reportData);
            
            const statusEmoji = report.success ? '✅' : '❌';
            const regressionEmoji = report.regressionCount > 0 ? '🚨' : '✅';
            
            const commentBody = `## ${statusEmoji} パフォーマンステスト結果

### 📊 テスト サマリー
- **総テスト数**: ${report.totalTests}
- **成功**: ${report.passedTests}
- **失敗**: ${report.failedTests}
- **実行時間**: ${report.executionTimeMs}ms

### ${regressionEmoji} 回帰検出
- **検出数**: ${report.regressionCount}

${report.regressionCount > 0 ? `
#### 検出された回帰
${report.regressions.map(r => `- **${r.testName}**: ${r.reason}`).join('\n')}
` : ''}

### 📈 詳細結果
詳細な結果は [Artifacts](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}) からダウンロードできます。

---
*Performance tests run at ${new Date().toISOString()}*`;

            // PR にコメント追加
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          } catch (error) {
            console.log('パフォーマンスレポートファイルが見つかりません:', error.message);
          }

  # パフォーマンスベースライン更新ジョブ（mainブランチのみ）
  update-baseline:
    name: ベースライン更新
    runs-on: ubuntu-latest
    needs: performance-tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Flutter環境をセットアップ
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true

    - name: 依存関係をインストール
      run: flutter pub get

    - name: コード生成を実行
      run: dart run build_runner build --delete-conflicting-outputs

    - name: ベースライン更新用パフォーマンステスト実行
      run: |
        echo "📊 ベースライン更新用パフォーマンステスト実行"
        dart test/performance/run_performance_tests.dart \
          --regression-threshold=50.0 \
          --update-baseline

    - name: 更新されたベースラインをコミット
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -f "performance_baseline.json" ]; then
          git add performance_baseline.json
          git commit -m "chore: update performance baseline [skip ci]" || exit 0
          git push
        fi