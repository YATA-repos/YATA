name: Build Desktop Bundles (Tagged)

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-desktop:
    name: Build ${{ matrix.build-target }} bundle
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            build-target: linux
            artifact-path: build/linux/x64/release/appimage/YATA-${{ github.ref_name }}.AppImage
            artifact-name: yata-linux-appimage
          - os: windows-latest
            build-target: windows
            artifact-path: build/windows/x64/runner/Release
            artifact-name: yata-windows-runner
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Generate environment file
        shell: bash
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_OAUTH_CALLBACK_URL_DEV: ${{ secrets.SUPABASE_OAUTH_CALLBACK_URL_DEV }}
          SUPABASE_OAUTH_CALLBACK_URL_PROD: ${{ secrets.SUPABASE_OAUTH_CALLBACK_URL_PROD }}
          SUPABASE_OAUTH_CALLBACK_URL_MOBILE: ${{ secrets.SUPABASE_OAUTH_CALLBACK_URL_MOBILE }}
          SUPABASE_OAUTH_CALLBACK_URL_DESKTOP: ${{ secrets.SUPABASE_OAUTH_CALLBACK_URL_DESKTOP }}
          DEBUG_MODE: ${{ secrets.DEBUG_MODE }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          LOG_DIR: ${{ secrets.LOG_DIR }}
          LOG_FLUSH_INTERVAL_MS: ${{ secrets.LOG_FLUSH_INTERVAL_MS }}
          LOG_MAX_QUEUE: ${{ secrets.LOG_MAX_QUEUE }}
          LOG_MAX_FILE_SIZE_MB: ${{ secrets.LOG_MAX_FILE_SIZE_MB }}
          LOG_MAX_DISK_MB: ${{ secrets.LOG_MAX_DISK_MB }}
          LOG_RETENTION_DAYS: ${{ secrets.LOG_RETENTION_DAYS }}
          LOG_BACKPRESSURE: ${{ secrets.LOG_BACKPRESSURE }}
          ORDER_MANAGEMENT_PERF_TRACING: ${{ secrets.ORDER_MANAGEMENT_PERF_TRACING }}
        run: |
          set -euo pipefail

          required=(SUPABASE_URL SUPABASE_ANON_KEY)
          for key in "${required[@]}"; do
            value="${!key:-}"
            if [ -z "$value" ]; then
              echo "::error::Missing required secret: $key"
              exit 1
            fi
          done

          {
            printf "SUPABASE_URL=%s\n" "$SUPABASE_URL"
            printf "SUPABASE_ANON_KEY=%s\n" "$SUPABASE_ANON_KEY"
          } > .env

          optional=(
            SUPABASE_OAUTH_CALLBACK_URL_DEV
            SUPABASE_OAUTH_CALLBACK_URL_PROD
            SUPABASE_OAUTH_CALLBACK_URL_MOBILE
            SUPABASE_OAUTH_CALLBACK_URL_DESKTOP
            DEBUG_MODE
            LOG_LEVEL
            LOG_DIR
            LOG_FLUSH_INTERVAL_MS
            LOG_MAX_QUEUE
            LOG_MAX_FILE_SIZE_MB
            LOG_MAX_DISK_MB
            LOG_RETENTION_DAYS
            LOG_BACKPRESSURE
            ORDER_MANAGEMENT_PERF_TRACING
          )

          for key in "${optional[@]}"; do
            value="${!key:-}"
            if [ -n "$value" ]; then
              printf "%s=%s\n" "$key" "$value" >> .env
            fi
          done

      - name: Enable desktop target
        if: matrix.build-target == 'linux'
        run: flutter config --enable-linux-desktop

      - name: Enable desktop target
        if: matrix.build-target == 'windows'
        run: flutter config --enable-windows-desktop

      - name: Install Linux build dependencies
        if: matrix.build-target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Fetch Flutter dependencies
        run: flutter pub get

      - name: Generate code with build_runner
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build release bundle
        run: flutter build ${{ matrix.build-target }} --release

      - name: Package Linux AppImage
        if: matrix.build-target == 'linux'
        run: |
          set -euo pipefail

          BUNDLE_DIR="build/linux/x64/release/bundle"
          APPDIR="build/linux/x64/release/AppDir"
          APPIMAGE_DIR="build/linux/x64/release/appimage"

          rm -rf "$APPDIR"
          mkdir -p "$APPDIR/usr/bin"
          cp -a "$BUNDLE_DIR/." "$APPDIR/usr/bin"

          cat <<'EOF' > "$APPDIR/AppRun"
          #!/bin/sh
          HERE="$(dirname "$(readlink -f "$0")")"
          export LD_LIBRARY_PATH="$HERE/usr/bin/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
          cd "$HERE/usr/bin"
          exec ./yata "$@"
          EOF
          chmod +x "$APPDIR/AppRun"

          cat <<'DESKTOP' > "$APPDIR/yata.desktop"
          [Desktop Entry]
          Type=Application
          Name=YATA
          Comment=Inventory and order management system for food stalls
          Exec=yata
          Icon=yata
          Categories=Office;Utility;
          StartupNotify=true
          DESKTOP

          install -Dm644 assets/icon/icon.png "$APPDIR/yata.png"
          install -Dm644 "$APPDIR/yata.desktop" "$APPDIR/usr/share/applications/yata.desktop"
          install -Dm644 assets/icon/icon.png "$APPDIR/usr/share/icons/hicolor/512x512/apps/yata.png"

          wget -O appimagetool https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool

          mkdir -p "$APPIMAGE_DIR"

          rm -f ./*.AppImage

          ARCH=x86_64 ./appimagetool --appimage-extract-and-run "$APPDIR"

          GENERATED_APPIMAGE="$(ls -1 *.AppImage | head -n 1)"
          if [ -z "$GENERATED_APPIMAGE" ]; then
            echo "::error::Failed to generate AppImage"
            exit 1
          fi

          VERSION="${GITHUB_REF_NAME:-linux}"
          TARGET_APPIMAGE="$APPIMAGE_DIR/YATA-$VERSION.AppImage"

          mv "$GENERATED_APPIMAGE" "$TARGET_APPIMAGE"

          echo "AppImage created at $TARGET_APPIMAGE"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          if-no-files-found: error
