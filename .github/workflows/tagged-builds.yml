name: Build and Release (Tagged)

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-platforms:
    name: Build ${{ matrix.build-target }} bundle
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            build-target: linux
            artifact-path: build/linux/x64/release/appimage/YATA-${{ github.ref_name }}.AppImage
            artifact-name: yata-linux-appimage
          - os: windows-latest
            build-target: windows
            # Windows „ÅØ Release/ ÈÖç‰∏ã„ÅÆ„Åø„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
            artifact-path: build/windows/x64/runner/Release/**
            artifact-name: yata-windows-runner
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Generate environment file
        shell: bash
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_OAUTH_CALLBACK_URL_DEV: ${{ secrets.SUPABASE_OAUTH_CALLBACK_URL_DEV }}
          SUPABASE_OAUTH_CALLBACK_URL_PROD: ${{ secrets.SUPABASE_OAUTH_CALLBACK_URL_PROD }}
          SUPABASE_OAUTH_CALLBACK_URL_MOBILE: ${{ secrets.SUPABASE_OAUTH_CALLBACK_URL_MOBILE }}
          SUPABASE_OAUTH_CALLBACK_URL_DESKTOP: ${{ secrets.SUPABASE_OAUTH_CALLBACK_URL_DESKTOP }}
          DEBUG_MODE: ${{ secrets.DEBUG_MODE }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          LOG_DIR: ${{ secrets.LOG_DIR }}
          LOG_FLUSH_INTERVAL_MS: ${{ secrets.LOG_FLUSH_INTERVAL_MS }}
          LOG_MAX_QUEUE: ${{ secrets.LOG_MAX_QUEUE }}
          LOG_MAX_FILE_SIZE_MB: ${{ secrets.LOG_MAX_FILE_SIZE_MB }}
          LOG_MAX_DISK_MB: ${{ secrets.LOG_MAX_DISK_MB }}
          LOG_RETENTION_DAYS: ${{ secrets.LOG_RETENTION_DAYS }}
          LOG_BACKPRESSURE: ${{ secrets.LOG_BACKPRESSURE }}
          ORDER_MANAGEMENT_PERF_TRACING: ${{ secrets.ORDER_MANAGEMENT_PERF_TRACING }}
        run: |
          set -euo pipefail

          required=(SUPABASE_URL SUPABASE_ANON_KEY)
          for key in "${required[@]}"; do
            value="${!key:-}"
            if [ -z "$value" ]; then
              echo "::error::Missing required secret: $key"
              exit 1
            fi
          done

          {
            printf "SUPABASE_URL=%s\n" "$SUPABASE_URL"
            printf "SUPABASE_ANON_KEY=%s\n" "$SUPABASE_ANON_KEY"
          } > .env

          optional=(
            SUPABASE_OAUTH_CALLBACK_URL_DEV
            SUPABASE_OAUTH_CALLBACK_URL_PROD
            SUPABASE_OAUTH_CALLBACK_URL_MOBILE
            SUPABASE_OAUTH_CALLBACK_URL_DESKTOP
            DEBUG_MODE
            LOG_LEVEL
            LOG_DIR
            LOG_FLUSH_INTERVAL_MS
            LOG_MAX_QUEUE
            LOG_MAX_FILE_SIZE_MB
            LOG_MAX_DISK_MB
            LOG_RETENTION_DAYS
            LOG_BACKPRESSURE
            ORDER_MANAGEMENT_PERF_TRACING
          )

          for key in "${optional[@]}"; do
            value="${!key:-}"
            if [ -n "$value" ]; then
              printf "%s=%s\n" "$key" "$value" >> .env
            fi
          done

      - name: Enable desktop target (Linux)
        if: matrix.build-target == 'linux'
        run: flutter config --enable-linux-desktop

      - name: Enable desktop target (Windows)
        if: matrix.build-target == 'windows'
        run: flutter config --enable-windows-desktop

      - name: Install Linux build dependencies
        if: matrix.build-target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Fetch Flutter dependencies
        run: flutter pub get

      - name: Generate code with build_runner
        run: flutter pub run build_runner build --delete-conflicting-outputs

      # .env „Çí„Éì„É´„ÉâÊôÇ„Å´Ê≥®ÂÖ•
      - name: Build release bundle
        run: flutter build ${{ matrix.build-target }} --release --dart-define-from-file=.env

      - name: Remove environment file
        shell: bash
        if: always()
        run: |
          set -euo pipefail
          rm -f .env

      - name: Package Linux AppImage
        if: matrix.build-target == 'linux'
        shell: bash
        run: |
          set -euo pipefail

          BUNDLE_DIR="build/linux/x64/release/bundle"
          APPDIR="build/linux/x64/release/AppDir"
          APPIMAGE_DIR="build/linux/x64/release/appimage"

          rm -rf "$APPDIR"
          mkdir -p "$APPDIR/usr/bin"
          cp -a "$BUNDLE_DIR/." "$APPDIR/usr/bin"

          cat <<'EOF' > "$APPDIR/AppRun"
          #!/bin/sh
          HERE="$(dirname "$(readlink -f "$0")")"
          export LD_LIBRARY_PATH="$HERE/usr/bin/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
          cd "$HERE/usr/bin"
          exec ./yata "$@"
          EOF
          chmod +x "$APPDIR/AppRun"

          cat <<'DESKTOP' > "$APPDIR/yata.desktop"
          [Desktop Entry]
          Type=Application
          Name=YATA
          Comment=Inventory and order management system for food stalls
          Exec=yata
          Icon=yata
          Categories=Office;Utility;
          StartupNotify=true
          DESKTOP

          install -Dm644 assets/icon/icon.png "$APPDIR/yata.png"
          install -Dm644 "$APPDIR/yata.desktop" "$APPDIR/usr/share/applications/yata.desktop"
          install -Dm644 assets/icon/icon.png "$APPDIR/usr/share/icons/hicolor/512x512/apps/yata.png"

          wget -O appimagetool https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool

          mkdir -p "$APPIMAGE_DIR"
          rm -f ./*.AppImage

          ARCH=x86_64 ./appimagetool --appimage-extract-and-run "$APPDIR"

          GENERATED_APPIMAGE="$(ls -1 *.AppImage | head -n 1)"
          if [ -z "$GENERATED_APPIMAGE" ]; then
            echo "::error::Failed to generate AppImage"
            exit 1
          fi

          VERSION="${GITHUB_REF_NAME:-linux}"
          TARGET_APPIMAGE="$APPIMAGE_DIR/YATA-$VERSION.AppImage"
          mv "$GENERATED_APPIMAGE" "$TARGET_APPIMAGE"
          echo "AppImage created at $TARGET_APPIMAGE"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          if-no-files-found: error

  # üß© ËøΩÂä†ÔºöWindows „Ç§„É≥„Çπ„Éà„Éº„É©„ÉºÁîüÊàêÔºàInno SetupÔºâ
  windows-installer:
    name: Build Windows Installer (Inno Setup)
    runs-on: windows-latest
    needs: build-platforms
    steps:
      - name: Download Windows runner artifact
        uses: actions/download-artifact@v4
        with:
          name: yata-windows-runner
          path: installer/workdir

      - name: Flatten Windows runner directory
        shell: pwsh
        run: |
          $root = Join-Path (Get-Location) 'installer\workdir'
          $releasePath = Get-ChildItem -Path $root -Recurse -Filter 'yata.exe' -File | Select-Object -First 1 | Split-Path
          if (-not $releasePath) {
            throw "yata.exe „Åå ${root} ‰ª•‰∏ã„ÅßË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ"
          }

          if ($releasePath -ieq $root) {
            Write-Host 'Runner contents are already flattened.'
          }
          else {
            Get-ChildItem -Path $releasePath -Force | ForEach-Object {
              Move-Item -Path $_.FullName -Destination $root -Force
            }

            Remove-Item -Path $releasePath -Recurse -Force -ErrorAction SilentlyContinue

            $parent = Split-Path $releasePath
            while ($parent -and (Test-Path $parent) -and ($parent -like "$root*")) {
              if (-not (Get-ChildItem -Path $parent -Force -ErrorAction SilentlyContinue)) {
                Remove-Item -Path $parent -Force
                $parent = Split-Path $parent
              }
              else {
                break
              }
            }
          }

      - name: Show downloaded tree
        shell: pwsh
        run: |
          Get-ChildItem -Recurse installer | ForEach-Object FullName

      - name: Install Inno Setup
        shell: pwsh
        run: |
          choco install innosetup -y
          $iscc = Get-Command iscc -ErrorAction SilentlyContinue
          if (-not $iscc) {
            throw "ISCC (Inno Setup) not found in PATH after installation."
          }

      - name: Write Inno Setup script
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path installer\out | Out-Null
          $lines = @(
            '#define AppVersion GetStringDef("AppVersion", "0.0.0")'
            '[Setup]'
            'AppId={{1B9A9E73-4C46-4E3A-9D9E-3A7F8EACB001}}'
            'AppName=YATA'
            'AppVersion={#AppVersion}'
            'DefaultDirName={pf}\YATA'
            'DefaultGroupName=YATA'
            'DisableProgramGroupPage=yes'
            'OutputDir=installer\out'
            'OutputBaseFilename=YATA-{#AppVersion}-setup'
            'Compression=lzma'
            'SolidCompression=yes'
            'ArchitecturesInstallIn64BitMode=x64'
            'WizardStyle=modern'
            ''
            '[Files]'
            'Source: "installer\workdir\*"; DestDir: "{app}"; Flags: recursesubdirs ignoreversion'
            ''
            '[Tasks]'
            'Name: "desktopicon"; Description: "„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Å´„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Çí‰ΩúÊàê"; GroupDescription: "ËøΩÂä†„ÅÆ„Ç¢„Ç§„Ç≥„É≥:"; Flags: checkedonce'
            ''
            '[Icons]'
            'Name: "{autoprograms}\YATA"; Filename: "{app}\yata.exe"'
            'Name: "{autodesktop}\YATA"; Filename: "{app}\yata.exe"; Tasks: desktopicon'
            ''
            '[Run]'
            'Filename: "{app}\yata.exe"; Description: "YATA „ÇíËµ∑Âãï"; Flags: nowait postinstall skipifsilent'
          )
          $lines | Set-Content -Path installer\YATA.iss -Encoding UTF8

      - name: Compile installer
        shell: pwsh
        run: |
          $iscc = (Get-Command iscc).Source
          & $iscc /Qp /DAppVersion="$env:GITHUB_REF_NAME" installer\YATA.iss
          if ($LASTEXITCODE -ne 0) { throw "Inno Setup compile failed." }
          Get-ChildItem installer\out\*.exe | ForEach-Object FullName

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: yata-windows-installer
          path: installer\out\YATA-${{ github.ref_name }}-setup.exe
          if-no-files-found: error

  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build-platforms, windows-installer]
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: yata-linux-appimage
          path: release-assets/linux

      - name: Download Windows zip source
        uses: actions/download-artifact@v4
        with:
          name: yata-windows-runner
          path: release-assets/windows

      - name: Download Windows installer
        uses: actions/download-artifact@v4
        with:
          name: yata-windows-installer
          path: release-assets/windows-installer

      - name: Prepare release assets
        shell: bash
        run: |
          set -euo pipefail

          TAG_NAME="${GITHUB_REF_NAME}"
          DIST_DIR="release-assets/dist"
          mkdir -p "$DIST_DIR"
          ABS_DIST_DIR="$(pwd)/$DIST_DIR"

          # --- Linux AppImage ---
          LINUX_SRC="release-assets/linux/YATA-${TAG_NAME}.AppImage"
          LINUX_DEST="$DIST_DIR/YATA-${TAG_NAME}-linux.AppImage"
          [ -f "$LINUX_SRC" ] || { echo "::error::Missing Linux AppImage: $LINUX_SRC"; ls -R release-assets/linux || true; exit 1; }
          cp "$LINUX_SRC" "$LINUX_DEST"

          # --- Windows ZIPÔºà„Éù„Éº„Çø„Éñ„É´Ôºâ---
          WINDOWS_DIR="release-assets/windows"
          [ -d "$WINDOWS_DIR" ] || { echo "::error::Missing Windows dir: $WINDOWS_DIR"; exit 1; }
          ABS_WINDOWS_ZIP="$ABS_DIST_DIR/YATA-${TAG_NAME}-windows.zip"
          SUBDIR_COUNT=$(find "$WINDOWS_DIR" -mindepth 1 -maxdepth 1 -type d | wc -l | tr -d ' ')
          FILE_COUNT=$(find "$WINDOWS_DIR" -mindepth 1 -maxdepth 1 -type f | wc -l | tr -d ' ')
          if [ "$SUBDIR_COUNT" = "1" ] && [ "$FILE_COUNT" = "0" ]; then
            SUBDIR="$(find "$WINDOWS_DIR" -mindepth 1 -maxdepth 1 -type d | head -n1)"
            (cd "$SUBDIR" && zip -r "$ABS_WINDOWS_ZIP" .)
          else
            (cd "$WINDOWS_DIR" && zip -r "$ABS_WINDOWS_ZIP" .)
          fi

          # --- Windows InstallerÔºàSetup.exeÔºâ---
          INSTALLER_SRC="release-assets/windows-installer/YATA-${TAG_NAME}-setup.exe"
          INSTALLER_DEST="$DIST_DIR/YATA-${TAG_NAME}-windows-setup.exe"
          [ -f "$INSTALLER_SRC" ] || { echo "::error::Missing Installer: $INSTALLER_SRC"; ls -R release-assets/windows-installer || true; exit 1; }
          cp "$INSTALLER_SRC" "$INSTALLER_DEST"

      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            release-assets/dist/YATA-${{ github.ref_name }}-linux.AppImage
            release-assets/dist/YATA-${{ github.ref_name }}-windows.zip
            release-assets/dist/YATA-${{ github.ref_name }}-windows-setup.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
